{
  "lumaMatrix.addColorToPixel": "Increase the colour intensity of pixel (x,y) with given colours red, green and blue. \r\nPreviously applied color value is considered.\r\nIntensity will not go above 255.",
  "lumaMatrix.applyPixelBuffer": "Write a buffer full of colours to the matrix. Color must be split into 3 successive bytes following order red, green, blue.",
  "lumaMatrix.clear": "Clear the pixels of the Luma Matrix",
  "lumaMatrix.clearIcon": "Clear icon",
  "lumaMatrix.clearIcon|param|icon": "is number of icon [0..3]. Others will clear all",
  "lumaMatrix.compareJoystick": "Compare Luma Matrix joystick position",
  "lumaMatrix.createWordClock": "Initialize Word Clock with given colours. Time will be tracked and pixels on the matrix updated in background.\r\nNote: Initialize Luma Matrix before this block.\r\nWarning: Do not use other methods from Pixel group while using this as those blocks will work against the clock logic.\r\nOptional: joystick enable allows to \"scroll\" through internal time if turned on. This can be changed during runtime.",
  "lumaMatrix.debugEnable": "Enable serial messages for debugging printed by the Luma Matrix extension.",
  "lumaMatrix.eColorPalette": "Enum with predefined colours to reduce packet size over radio",
  "lumaMatrix.eDataType": "Enum with predefined datatypes in messages sent over radio",
  "lumaMatrix.getColorFromPixel": "Get the colour of the pixel at coordinate (x,y)",
  "lumaMatrix.getColorPalette": "Get element from enum with predefined colours to reduce packet size over radio",
  "lumaMatrix.getCurrentTime": "Get the current time in seconds, 0 if currently unavailable.",
  "lumaMatrix.getCurrentTimeAsText": "Get the current time as a formatted string in \"hh:mm:ss\".",
  "lumaMatrix.getDataType": "Get element from enum with predefined datatypes in messages sent over radio",
  "lumaMatrix.getImageFromCoordinates": "Get a representation of which pixels are turned on based on input coordinates. \r\nOnly bitmap is available without colour information.",
  "lumaMatrix.getJoystickDirectionEnum": "Select direction from joystick enum",
  "lumaMatrix.getMatrixImage": "Get a representation of which pixels are turned on. Only bitmap is available without colour information.",
  "lumaMatrix.getPixelBuffer": "Get the buffer with stored colours for each pixel. Each pixel uses 3 bytes in order red, green, blue.",
  "lumaMatrix.initializeMatrix": "Initialize the 8 by 8 Neopixel Matrix with a joystick. \r\nThis block needs to be execute only once at the start.",
  "lumaMatrix.initializeMatrixInterfaceExpert": "set custom gpio pins for the input devices. \r\nNote: Initialize matrix first",
  "lumaMatrix.initializeMatrixInterfaceExpert|param|pinCenterButtonTemp": "is the GPIO pin for the center button of the joystick",
  "lumaMatrix.initializeMatrixInterfaceExpert|param|pinDownButtonTemp": "is the GPIO pin for the down button of the joystick",
  "lumaMatrix.initializeMatrixInterfaceExpert|param|pinLeftButtonTemp": "is the GPIO pin for the left button of the joystick",
  "lumaMatrix.initializeMatrixInterfaceExpert|param|pinRightButtonTemp": "is the GPIO pin for the right button of the joystick",
  "lumaMatrix.initializeMatrixInterfaceExpert|param|pinSwitchTemp": "is the GPIO pin for the switch",
  "lumaMatrix.initializeMatrixInterfaceExpert|param|pinUpButtonTemp": "is the GPIO pin for the up button of the joystick",
  "lumaMatrix.isSwitchSet": "Compare Luma Matrix switch position",
  "lumaMatrix.joystickChangedThread": "Creates thread to poll joystick direction and execute callback when direction changes. \r\nThe draggable parameter \"direction\" holds the value which triggered the call",
  "lumaMatrix.joystickDirectionThread": "Creates thread to poll joystick direction and execute callback when specified direction happens.",
  "lumaMatrix.matrix8x8": "8 by 8 matrix bitmap",
  "lumaMatrix.movingImage": "Let text scroll across the matrix, letter by letter from right to the left.",
  "lumaMatrix.onReceivedMatrix": "Listen on incomming radio messages from other Luma Matrix. Radio channel needs to be set in advance",
  "lumaMatrix.parseBufferForColor": "Parse received message for colour",
  "lumaMatrix.parseBufferForLayer": "Parse received message for layer",
  "lumaMatrix.parseColorImage": "Parse received message for coloured image",
  "lumaMatrix.parseImage": "Parse received message for image",
  "lumaMatrix.parsePixel": "Parse received message for pixel and applies to luma matrix",
  "lumaMatrix.readJoystick": "Read Luma Matrix joystick position",
  "lumaMatrix.readJoystickText": "Read Luma Matrix joystick position as text",
  "lumaMatrix.readSwitch": "Read Luma Matrix switch position",
  "lumaMatrix.rgbToColor": "Combine colour channels into a 24 bit colour number",
  "lumaMatrix.scrollText": "Let text scroll across the Luma Matrix pixels.",
  "lumaMatrix.sendImageWithColor": "Send bitmap in single colour to other Luma Matrix over radio. Radio channel needs to be set in advance",
  "lumaMatrix.sendPixel": "Send one pixel in single colour to other Luma Matrix over radio. Radio channel needs to be set in advance",
  "lumaMatrix.sendPixelBuffer": "Send compressed pixel buffer in colors of pallette to other Luma Matrix over radio. Radio channel needs to be set in advance",
  "lumaMatrix.setBrightness": "Set the brightness of the pixels inside range from 0 to 255.",
  "lumaMatrix.setCurrentTime": "Set internal time to new value",
  "lumaMatrix.setCurrentTimeStr": "Set internal time to new value",
  "lumaMatrix.setCurrentTimeStr|param|timestring": "is in format \"hh:mm:ss\"",
  "lumaMatrix.setCurrentTime|param|hours": "is number from 0 to 23",
  "lumaMatrix.setCurrentTime|param|minutes": "is number from 0 to 59",
  "lumaMatrix.setCurrentTime|param|seconds": "is number from 0 to 59",
  "lumaMatrix.setIconColor": "Set an icon to a specified color",
  "lumaMatrix.setIconColor|param|icon": "is number of icon [0..3]",
  "lumaMatrix.setJoystickTimeEnable": "Enable time setting with joystick. Up/Down for hours and Left/Right for minutes",
  "lumaMatrix.setJoystickTimeEnable|param|state": "if true enables the joystick",
  "lumaMatrix.setOnePixel": "Set colour of pixel a coordinate to a 24 bit color value",
  "lumaMatrix.setOnePixelRGB": "Set colour of pixel a coordinate to the colour channels",
  "lumaMatrix.setWordColors": "Set colours of the words to new values",
  "lumaMatrix.showImage": "Write bitmap of pixels in defined colour to the matrix.\r\nlayer is true by default and will not clear unset pixels.",
  "lumaMatrix.snake": "Fully implemented hungry snake game with joystick controls.\r\nWarning: Place only initialization block and this block at the start and do not implement other code.",
  "lumaMatrix.subtractColorFromPixel": "Decrease the colour intensity of pixel (x,y) with given colours red, green and blue. \r\nPreviously applied color value is considered.\r\nIntensity will not go below 0.",
  "lumaMatrix.switchValueChangedThread": "Creates thread to poll switch state and execute callback when state changes.",
  "lumaMatrix.testLedMatrixHW": "Defined test sequence which checks every aspect of the hardware."
}